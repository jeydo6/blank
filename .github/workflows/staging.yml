name: staging

on:
  push:
    branches:
      - 'release/**'

jobs:
  main:
    runs-on: self-hosted
    steps:
      - name: Set GitHub Environment variables
        run: |
          # Set GitHub Environment variables
          echo "DOCKER_IMAGE_NAME=${GITHUB_REPOSITORY}" >> $GITHUB_ENV
          echo "DOCKER_CONTAINER_NAME=$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2)" >> $GITHUB_ENV
          echo "VERSION_NUMBER=$(echo $GITHUB_REF_NAME | cut -d'/' -f2)" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

      - name: Build and Push Docker image
        run: |
          # Build and Push Docker image
          docker build --platform linux/amd64 --tag ${{ env.DOCKER_IMAGE_NAME }}:latest --tag ${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION_NUMBER }} .
          docker save ${{ env.DOCKER_IMAGE_NAME }} | bzip2 | ssh ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_HOST }} docker load
          docker image prune -f

      - name: Run Docker image
        run: |
          # Run Docker image
          ssh ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_HOST }} << EOF
          docker rm -f ${{ env.DOCKER_CONTAINER_NAME }}
          docker run --detach \
          --name ${{ env.DOCKER_CONTAINER_NAME }} \
          --publish ${{ secrets.STAGING_APP_PORT }}:${{ secrets.STAGING_APP_PORT }} \
          --env ASPNETCORE_ENVIRONMENT=Staging \
          --env ASPNETCORE_HTTP_PORTS=${{ secrets.STAGING_APP_PORT }} \
          --restart unless-stopped \
          ${{ env.DOCKER_IMAGE_NAME }}
          EOF
